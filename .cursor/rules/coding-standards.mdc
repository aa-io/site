---
description:
globs:
alwaysApply: false
---
# Coding Standards & Conventions

## TypeScript Guidelines
- Use strict TypeScript configuration as defined in [tsconfig.json](mdc:tsconfig.json)
- Prefer explicit typing over `any`
- Use proper React component typing with `React.FC` or explicit props interfaces
- Leverage path aliases: `@/` maps to the root directory

## Component Structure
- **UI Components**: Place reusable UI components in [components/ui/](mdc:components/ui/)
- **Feature Components**: Place feature-specific components in [components/](mdc:components/)
- Follow shadcn/ui patterns for component composition and variants
- Use `clsx` and `tailwind-merge` for conditional styling via `cn()` utility

## Styling Conventions
- Use Tailwind CSS classes with the configured design system
- Leverage CSS variables for theming (defined in [app/globals.css](mdc:app/globals.css))
- Follow the New York style guide from shadcn/ui
- Use semantic color tokens: `--background`, `--foreground`, `--muted`, etc.

## File Organization
- Pages go in [app/(pages)/](mdc:app/(pages)/) route group
- Use descriptive folder names with parentheses for route groups
- Keep related components close to where they're used
- Separate concerns: UI components, business logic, and utilities

## Import Conventions
- Use absolute imports with `@/` prefix
- Group imports: React/Next.js first, then third-party, then local
- Use named exports for components and utilities
- Default export only for page components

## Component Patterns
- Use compound components for complex UI (see [components/ui/sidebar.tsx](mdc:components/ui/sidebar.tsx))
- Implement proper forwarding of refs with `React.forwardRef`
- Use Radix UI primitives for accessible components
- Follow the composition pattern over prop drilling
